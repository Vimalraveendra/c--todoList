@page "/todo"

<h3>Todo</h3>
@*Edit form*@

<EditForm Model="task" class="form-inline" OnValidSubmit="AddTask">
    <input type="text" class="form-control mx-2" @bind-value="task.TaskName"/>
    <button class="btn btn-outline-primary mx-2">Add Item</button>
</EditForm>

<div class="progress-bar my-2 mx-2" style="width:@(PercentageCompleted)%" role="progressbar" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100">
    @(PercentageCompleted)%
</div>

<ul class="list-group my-2">
    @foreach (var taskItem in taskList)
    {
            if (taskItem.IsCompleted)
            {


            @*task completed*@

            <li class="list-group-item list-group-item-success mx-1" @onclick="(() => taskItem.IsCompleted = !taskItem.IsCompleted)"><del>@taskItem.TaskName</del></li>
            }
            else
            {
             @*task not completed   *@
            <li class="list-group-item list-group-item-secondary mx-1" @onclick="(() => taskItem.IsCompleted = !taskItem.IsCompleted)" >@taskItem.TaskName</li>
            }
        
    }

</ul>

@code {
    // creating list item
    protected List<TaskModel> taskList = new List<TaskModel>();
    // creating class object.
    protected TaskModel task = new TaskModel();

    private void AddTask()
    {
        taskList.Add(task);
         @* once enter the item clear the input field*@
        task = new TaskModel();
}

     public int PercentageCompleted
        {
            get {
             return taskList.Count>0? (taskList.Count(x=>x.IsCompleted)*100/taskList.Count):0;

        }

        }
}
